// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
  DELIVERY
}

enum OrderStatus {
  AWAITING_PAYMENT
  PREPARING
  READY_FOR_SHIPPING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  TRANSFER
  YAPE
  PLIN
  CASH
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum UnitType {
  KG
  U
  L
  G
  PAQ
  PRESENTATION
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  phone           String    @unique
  name            String
  password        String
  role            UserRole  @default(CUSTOMER)
  active          Boolean   @default(true)
  emailVerified   Boolean   @default(false) @map("email_verified")
  phoneVerified   Boolean   @default(false) @map("phone_verified")
  avatar          String?
  address         String?
  preferences     Json?
  lastLogin       DateTime? @map("last_login")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  refreshTokens   RefreshToken[]
  orders          Order[]
  
  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([active])
  @@index([createdAt])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  icon        String
  color       String
  sortOrder   Int      @default(0) @map("sort_order")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  products    Product[]
  
  @@index([name])
  @@index([active])
  @@index([sortOrder])
  @@index([createdAt])
  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  categoryId  Int      @map("category_id")
  price       Decimal  @db.Decimal(10, 2)
  unit        UnitType
  description String?
  image       String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  category      Category       @relation(fields: [categoryId], references: [id])
  presentations Presentation[]
  orderItems    OrderItem[]
  
  @@index([name])
  @@index([categoryId])
  @@index([active])
  @@index([price])
  @@index([createdAt])
  @@index([categoryId, active])
  @@index([name, active])
  @@map("products")
}

model Presentation {
  id        Int      @id @default(autoincrement())
  productId Int      @map("product_id")
  name      String
  price     Decimal  @db.Decimal(10, 2)
  unit      String
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  
  @@map("presentations")
}

model Order {
  id              String        @id
  customerName    String        @map("customer_name")
  customerPhone   String        @map("customer_phone")
  customerEmail   String?       @map("customer_email")
  customerAddress String        @map("customer_address")
  userId          Int?          @map("user_id")
  date            DateTime      @default(now())
  status          OrderStatus   @default(AWAITING_PAYMENT)
  paymentMethod   PaymentMethod @map("payment_method")
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  notes           String?
  deliveryDate    DateTime?     @map("delivery_date")
  deliveryNotes   String?       @map("delivery_notes")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  // Relations
  user         User?         @relation(fields: [userId], references: [id])
  items        OrderItem[]
  payments     Payment[]
  statusHistory OrderStatusHistory[]
  
  @@index([customerPhone])
  @@index([customerEmail])
  @@index([userId])
  @@index([status])
  @@index([paymentStatus])
  @@index([paymentMethod])
  @@index([date])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([customerPhone, createdAt])
  @@index([paymentStatus, status])
  @@map("orders")
}

model OrderItem {
  id               Int           @id @default(autoincrement())
  orderId          String        @map("order_id")
  productId        Int           @map("product_id")
  presentationId   Int?          @map("presentation_id")
  productName      String        @map("product_name")
  quantity         Decimal       @db.Decimal(10, 3)
  price            Decimal       @db.Decimal(10, 2)
  total            Decimal       @db.Decimal(10, 2)
  presentationInfo Json?         @map("presentation_info")
  
  // Relations
  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product      Product       @relation(fields: [productId], references: [id])
  presentation Presentation? @relation(fields: [presentationId], references: [id])
  
  @@map("order_items")
}

model OrderStatusHistory {
  id        Int         @id @default(autoincrement())
  orderId   String      @map("order_id")
  status    OrderStatus
  notes     String?
  updatedBy String?     @map("updated_by")
  timestamp DateTime    @default(now())
  
  // Relations
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_status_history")
}

model Payment {
  id                String        @id
  orderId           String        @map("order_id")
  customerName      String        @map("customer_name")
  customerPhone     String        @map("customer_phone")
  date              DateTime      @default(now())
  amount            Decimal       @db.Decimal(10, 2)
  method            PaymentMethod
  status            PaymentStatus @default(PENDING)
  voucher           String?
  voucherFileName   String?       @map("voucher_file_name")
  referenceNumber   String?       @map("reference_number")
  verificationNotes String?       @map("verification_notes")
  verifiedBy        String?       @map("verified_by")
  verifiedAt        DateTime?     @map("verified_at")
  rejectedReason    String?       @map("rejected_reason")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Relations
  order             Order         @relation(fields: [orderId], references: [id])
  
  @@index([orderId])
  @@index([customerPhone])
  @@index([status])
  @@index([method])
  @@index([date])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([method, status])
  @@index([referenceNumber])
  @@map("payments")
}